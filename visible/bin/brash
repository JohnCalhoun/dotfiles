#!/bin/bash
# Brash (Bash tRash) - a trash bin for Bash
# Copyright (C) 2012 Donald C. Parris
# License - GNU General Public License version 3:
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# You may find a copy of the license here.  http://www.gnu.org/licenses/gpl.html
# v. 0.1.1
# No warranties of any kind - use at your own risk!
# Website: http://dcparris.net/

### Functions ###
help()
{
echo "  Brash is a trash manager/recycle bin for the Bash shell."
echo "  Files are stored in ~/.trash/can | ~/.trash/log/trashlog"
echo "  Brash creates these directories and the log file on the first run"
echo " "
echo "  brash [action] file1 file2 dir/file3 dir2 -- acts on the file(s)/dir(s)"
echo "Examples: "
echo "  brash [path/]file1 -- tosses 'file1' in trash"
echo "  You can, optionally, run: brash toss path/file_name"
echo "  brash dirname sends the directory AND all its files to the trash"
echo "  brash restore dirname restores the directory AND its files."
echo " "
echo "  brash list -- prints a list of files in the trash can"
echo "  brash details -- pages the detailed list through less"
echo "  brash restore file_name -- restores tossed file to a location you choose."
echo "  brash info -- view the brash log"
echo "  brash empty -- permanently deletes (rm) files in ~/.trash/can"
echo "Notes: "
echo "  toss requires path if file is not in working directory"
echo "  restore requires the full path to where you want the restored file."
}


# Ensure we have a (preferably hidden) place to store 'deleted' files
# and a place to store a log file.
MkTrashCan()
{
mkdir --parents ~/.trash/can
mkdir ~/.trash/log
exit 0
}


# Here we toss out the trash. Note the use of date to timestamp the
# transaction. It is also appended to the log. If log does not exist, it 
# is created automatically. Then we actually move the file into the 
# trash can.
toss()
{
msgmved="Your files are in the trash."
timestamp=`date +%Y%m%d%H%M%S`

# We need to know if an argument is a file or directory.  If it's a
# directory, we want to work through any files it may contain, and add
# an entry for them in the log.  If a user tosses a directory that
# contains other files, the user can then search the log to discover it
# is in the trash.
for f in $filelist
do
    if [[ -d $f ]]; then    # handle directories here
        SAVEIFS=$IFS
        IFS=$(echo -en "\n\b")
        listfiles=$(find $f -print) # get the list of files in the dir
        for file in $listfiles
        do
            sourcefile=$(readlink -f $file)
            logmv="$sourcefile >> trash"
            printf "%s \t %s\n" $logmv $timestamp >> ~/.trash/log/trashlog
        done
        mv -f $f ~/.trash/can
        IFS=$SAVEIFS
    else               # process individual files    
        SAVEIFS=$IFS
        IFS=$(echo -en "\n\b")
        sourcefile=`readlink -f $f`
        logmv="$sourcefile >> trash"
        printf "%s \t %s\n" $logmv $timestamp >> ~/.trash/log/trashlog
        mv -f $f ~/.trash/can
        IFS=$SAVEIFS
    fi
done
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")    
printf "%s\n" $msgmved
}


# The user may want to see a list of files they tossed in the trash.
list()
{
if [ $action == "list" ]; then
    ls -A ~/.trash/can
else
    if [ $action == "details" ]; then
    ls -AlR ~/.trash/can | less
    fi
fi
}


# If the user wants, they can retrieve a file.  Again, this is timestamped
# and written to the log.
restore()
{
cd ~/.trash/can
echo "Where would you like to restore your files?"
echo -n "Be sure to give the full path (e.g., /home/user/dir): "

read RestoreDir

if [[ -d "$RestoreDir" && -w "$RestoreDir" ]]; then
    for f in $filelist
    do
        SAVEIFS=$IFS
        IFS=$(echo -en "\n\b")
        sourcefile=$f
        timestamp=`date +%Y%m%d%H%M%S`
        logmv="$sourcefile trash >> $RestoreDir"
        printf "%s \t %s\n" $logmv $timestamp >> ~/.trash/log/trashlog
        mv ~/.trash/can/$f $RestoreDir
        echo "${sourcefile#/*/} has been restored as of `date`"
        IFS=$SAVEIFS
    done
else
    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    E_EXISTPERM="Either you don't have write permission for \"$RestoreDir\", or it doesn't exist."
    printf "%b\n" $E_EXISTPERM
    IFS=$SAVEIFS
fi
}


# Users can view the history to see what moved which way and when.
info()
{
cat ~/.trash/log/trashlog | less
}


# If the user so chooses, all files can be permantly deleted.
empty()
{
answerempty=""
trashdir="$HOME/.trash/can"
if [ ! "$(ls -A $trashdir)" ]; then
     echo "The trash is Empty."
     exit
else
    echo -n "This will permanently delete all files in the trash.  Are you sure? y/n: "
    read answerempty
    if [[ $answerempty = "y" ]]; then
        SAVEIFS=$IFS
        IFS=$(echo -en "\n\b")
        echo "Permanently deleting all files in the trash."
        rm -r ~/.trash/can/*
        msgdel="Trash emptied."
        timestamp=`date +%Y%m%d%H%M%S`
        printf "%s \t %s\n" $msgdel $timestamp >> ~/.trash/log/trashlog
        IFS=$SAVEIFS
    elif [[ $answerempty = "n" ]]; then
        echo "Aborting operation - your files are still safe."
        return 0
    else
        if [[ $answerempty != "y" && $answerempty != "n" ]]; then
        echo "invalid option. Exiting."
        exit 1
        fi
    fi
fi
}


### Main Body ###
# Test whether .trash/can and log directories exist
if test ! -d "$HOME/.trash/can"
    then
        echo "Trash can does not yet exist. Let's create it now."
	MkTrashCan
fi

### Argument Handling ###
# Display usage message if no arguments. Test arguments to see if the
# first one is a file or directory. If not, assign it to an action.
# Strip the action so the remaining arguments can be treated as files
# or directories.
if [ $# -eq 0 ]; then    # Must have at least one argument.
    echo "usage: brash [action] file1 [file2]"
    exit 1
    elif [ -f "$1" -o -d "$1" ]   # if this is a file or directory
    then
        filelist="$@"
        toss
    # if it is NOT a file AND not a directory, it's an action.
    elif [ ! -f "$1" -a ! -d "$1" ]
    then
        action="$1"
        shift
        filelist="$@"
        if [ $action == "toss" ]; then
            toss
        elif [ $action == "restore" ]; then
            restore
        elif [ $action == "empty" ]; then
            empty
        elif [[ $action == "list" || $action == "details" ]]; then
            list
        elif [ $action == "info" ]; then
            info
        elif [ $action == "help" ]; then
            help
        else    # if the 'action' is not one of the above, then...
            if [ $action == " " ]; then
                echo "$action is invalid"
            fi
        fi        
fi
